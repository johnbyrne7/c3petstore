openapi: 3.0.4
info:
  title: Connexion Petstore - OpenAPI 3.0
  description: |-
    This is modified version of the sample Pet Store Server based on the OpenAPI 3.0 specification.
    This implements a set of simplified petstore REST services using Connexion 3, AsyncApp, Sqlalchemy, and Marshmallow

    Some useful links:
    - [The Connexion Pet Store repository](https://github.com/johnbyrne7/c3petstore)
  contact:
    email: johnbyrne7@gmail.com
  license:
    name: MIT
    url: https://mit-license.org
  version: 1.0.12
externalDocs:
  description: Find out more about Connexion
  url: https://connexion.readthedocs.io/en/stable/
servers:
  - url: /api/v3
tags:
  - name: pet
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: https://swagger.io
  - name: store
    description: Access to Petstore orders
    externalDocs:
      description: Find out more about our store
      url: https://swagger.io

paths:
  /pets:
    get:
      tags:
        - pet
      summary: Finds Pets.
      description: Returns a list of pets.  can be filtered by name, status, and/or tags
      operationId: views.pet.find
      parameters:
        - name: name
          in: query
          description: Name of pets to return
          required: false
          schema:
            type: string
        - name: status
          in: query
          description: Status of pets to return
          required: false
          schema:
            type: string
            enum:
              - available
              - pending
              - sold
        - name: limit
          in: query
          description: Maximum number of pets to return (default 10, maximum 100)
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 10
        - name: offset
          in: query
          description: Number of pets to skip before starting to collect the result set (default 0)
          required: false
          schema:
            type: integer
            format: int64
            minimum: 0
            default: 0
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid status value
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - petstore_auth:
            - read:pets
        - apiKey: []
    post:
      tags:
        - pet
      summary: Add a new pet to the store.
      description: Add a new pet to the store.
      operationId: views.pet.add
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetCreate'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - petstore_auth:
            - write:pets
            - read:pets
        - apiKey: []

  /pets/{_id}:
    get:
      tags:
        - pet
      summary: Find pet by ID.
      description: Returns a single pet.
      operationId: views.pet.get
      parameters:
        - name: _id
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - petstore_auth:
            - write:pets
            - read:pets
        - apiKey: []
    put:
      tags:
        - pet
      summary: Update an existing pet.
      description: Update an existing pet by Id.
      operationId: views.pet.update
      parameters:
        - name: _id
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - petstore_auth:
            - write:pets
            - read:pets
        - apiKey: []

    delete:
      tags:
        - pet
      summary: Deletes a pet.
      description: Delete a pet.
      operationId: views.pet.delete
      parameters:
        - name: _id
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Pet deleted
        '400':
          description: Invalid pet value
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - petstore_auth:
            - write:pets
            - read:pets
        - apiKey: []


  /orders:
    get:
      tags:
        - store
      summary: Finds Orders.
      description: Returns a list of orders.  can be filtered by petId, status
      operationId: views.order.find
      parameters:
        - name: petId
          in: query
          description:  Return orders that contain this petId
          required: false
          schema:
            type: integer
            format: int64
        - name: status
          in: query
          description: Status of orders to return
          required: false
          schema:
            type: string
            enum:
              - placed
              - approved
              - delivered
        - name: includePets
          in: query
          description: Include full pet objects in the response.  default=no
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Maximum number of orders to return (default 10, maximum 100)
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 10
        - name: offset
          in: query
          description: Number of orders to skip before starting to collect the result set (default 0)
          required: false
          schema:
            type: integer
            format: int64
            minimum: 0
            default: 0
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Invalid status value
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - petstore_auth:
            - read:orders
        - apiKey: []
    post:
      tags:
        - store
      summary: Place an order for a pet.
      description: Place a new order in the store.
      operationId: views.order.add
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreate'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - petstore_auth:
            - read:orders
            - write:orders
        - apiKey: []

  /orders/{_id}:
    get:
      tags:
        - store
      summary: Find purchase order by ID.
      description: For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
      operationId: views.order.get
      parameters:
        - name: _id
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
        - name: includePets
          in: query
          description: Include full pet objects in the response.  default=no
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - petstore_auth:
            - read:orders
        - apiKey: []

    put:
      tags:
        - store
      summary: Update an existing order.
      description: Update an existing order by Id.
      operationId: views.order.update
      parameters:
        - name: _id
          in: path
          description: ID of order that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: includePets
          in: query
          description: Include full pet objects in the response.  default=no
          required: false
          schema:
            type: string
      requestBody:
        description: Update an existent order in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - petstore_auth:
            - write:orders
            - read:orders
        - apiKey: []

    delete:
      tags:
        - store
      summary: Delete purchase order by identifier.
      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors.
      operationId: views.order.delete
      parameters:
        - name: _id
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: order deleted
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - petstore_auth:
            - write:orders
        - apiKey: []

components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          example: 10
        petIds:
          type: array
          items:
            $ref: '#/components/schemas/PetInOrder'
          minimum: 1
          example:
            - pet_id: 198772
              quantity: 1
            - pet_id: 19552
              quantity: 3
        pets:  #  Returned when includePets=yes
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/Pet'
          minimum: 1
          example:
            - id: 198772
              name: doggie
              status: available
            - id: 198773
              name: kitty
              status: available
        shipDate:
          type: string
          format: date
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
          default: placed
        complete:
          type: boolean
      xml:
        name: order
    OrderCreate:
      allOf:
        - $ref: '#/components/schemas/Order'
        - type: object
          required:
            - petIds

    PetInOrder:
        type: object
        properties:
          petId:
            type: integer
            format: int64
            example: 198773
          quantity:
            type: integer
            format: int32
            example: 1
        required:
          - petId
          - quantity

    OrderForPets:
        type: object
        properties:
          orderId:
            type: integer
            format: int64
            example: 198773
          quantity:
            type: integer
            format: int32
            example: 1

    Pet:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          example: 10
        name:
          type: string
          example: doggie
        description:
          type: string
          example: very cute Jack Russell
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
          default: available
      xml:
        name: pet
    PetCreate:
      allOf:
        - $ref: '#/components/schemas/Pet'
        - type: object
          required:
            - name

    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        password:
          tokenUrl: 'https://oauth.example/token'
      x-tokenInfoFunc: auth.utils.decode_token
      x-scopeValidateFunc: auth.utils.validate_scope

    apiKey:
      type: apiKey
      name: x-apiKey
      in: header
      x-apikeyInfoFunc: auth.utils.validate_apitoken